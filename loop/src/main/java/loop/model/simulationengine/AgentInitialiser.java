package loop.model.simulationengine;

import java.util.ArrayList;
import java.util.List;

import loop.model.simulationengine.strategies.MixedStrategy;
import loop.model.simulationengine.strategies.Strategy;

/**
 * An agent initialiser can be used to create the agents of a given segment and initialise
 * them with capital, strategies, and group affiliation.
 * 
 * @author Peter Koepernik
 *
 */
public class AgentInitialiser {
    
    /**
     * Creates and returns all agents of the given segment and initialises them with capital,
     * strategy and group affiliation.
     * 
     * @param segment the segment whose agents shall be initialised
     * @param mixedStrategiesAllowed indicates whether mixed strategies are allowed
     * @return the initialised agents
     */
    public List<Agent> initialiseAgents(EngineSegment segment, boolean mixedStrategiesAllowed) {
        List<Agent> agents = new ArrayList<Agent>();
        
        //determine intial capitals and strategies
        List<Integer> capitals = segment.getCapitalDistribution().getPicker().pickMany(segment.getAgentCount());
        List<Strategy> strategies = segment.getStrategyDistribution().getPicker().pickMany(segment.getAgentCount());

        //wrapping initial strategies in mixed strategy objects if necessary
        if (mixedStrategiesAllowed) {
            for (int i = 0; i < strategies.size(); i++) {
                List<Double> probabilities = new ArrayList<Double>();
                for (Strategy s: segment.getStrategyDistribution().getSupport()) {
                    probabilities.add((s == strategies.get(i)) ? 1.0 : 0.0);
                }
                MixedStrategy mixedStrategy = new MixedStrategy("--autogenerated--", "--autogenerated--",
                        new ArrayList<Strategy>(segment.getStrategyDistribution().getSupport()), probabilities);
                strategies.remove(i);
                strategies.add(i, mixedStrategy);
            }
        }
        
        //create and initialise agents
        for (int i = 0; i < segment.getAgentCount(); i++) {
            agents.add(new Agent(capitals.get(i), strategies.get(i), segment.getGroupId()));
        }
        
        return agents;
    }
}
